Image server pre-requisites and set up for development
------------------------------------------------------

Memcached server requires libevent.  To install libevent, download from:
http://www.monkey.org/~provos/libevent/
Then configure, make, make install.

To install Memcached, download from:
http://memcached.org/
Then configure, make, make install.

To install PostgreSQL server, download from:
http://www.postgresql.org/download/
and follow the install docs, or install using MacPorts if on OS X.

Create a new Postgres database:

$ sudo -u postgres createuser --no-superuser --no-createdb --no-createrole qis
$ sudo -u postgres createdb --owner qis qis-cache
$ sudo -u postgres createdb --owner qis qis-mgmt

To install ImageMagick, download from:
http://www.imagemagick.org/download/www/download.html
Then configure, make, make install. 
Consider building with --with-quantum-depth=8.
(see http://www.imagemagick.org/script/advanced-unix-installation.php#configure)
Version 6.6.5 or above is required, version 6.8.2-4 or above is preferred for a
bug fix that prevents JPEGs becoming blurred when converting from RGB to CMYK.

Check the output of the configure script to ensure the features you require are
enabled. In particular, check the following flags:

CFLAGS - If openmp is enabled, some imaging operations will be run in parallel
         to improve performance. Note that due a bug this causes ImageMagick to 
         crash on some platforms (such as Mac OS X, see below).

LIBS - The cms (-llcms) library is required for black point compensation and
       ICC colour profile operations. Other libraries you may require include:
         - libexif, libjpeg, libtiff, libpng, libxml2
         - ghostscript (libgs), zlib (libz), bzip2 (libbz2)

If libraries are missing, you will need to re-run the ImageMagick configuration
after installing them:

$ make distclean    # This fails on OS X. It is safer to start from clean files.
$ ./configure

[ On Mac, installing ImageMagick using MacPorts is easier, *BUT* there is a bug
[ in ImageMagick that causes it to crash when called from a POSIX thread. See:
[ http://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=16453
[ 
[ As a result, the image server will crash when running in a threaded way, such
[ as when using mod_wsgi. To workaround this, the port file must be edited to 
[ compile ImageMagick with the --disable-openmp flag set. Follow these steps:
[ 
[ $ port file ImageMagick
[ /opt/local/var/macports/sources/rsync.macports.org/release/ports/graphics/ImageMagick/Portfile
[ 
[ Edit the Portfile shown above, and add these lines near the bottom of the file:
[ 
[ variant no_openmp description {Disable OpenMP} {
[   configure.args-append   --disable-openmp
[ }
[ 
[ Then install the ImageMagick variant:
[ 
[ $ sudo port install ImageMagick +no_openmp
[
[ To install from source, assuming dependencies are already installed by Macports, use:
[
[ $ LDFLAGS=-L/opt/local/lib ./configure --with-quantum-depth=8 --disable-openmp \
[        --with-x=yes --x-includes=/usr/X11R6/include --x-libraries=/usr/X11R6/lib/ \
[        --without-perl --with-gs-font-dir=/opt/local/share/ghostscript/fonts
[ $ make
[ $ sudo make install
[
[ The LDFLAGS directive prevents "some components failed test" errors when checking
[ libjpeg, libtiff, etc during the configure.
[
[ The ImageMagick documentation claims you can use "make distclean" to re-configure,
[ but at v6.8.4 this does not appear to work (instead, start again with clean files).

To confirm that ImageMagick has configured and installed correctly, run the commands:

$ identify -list configure
$ identify -list format

You will need Python 2.6.5 or above, pip, then...

If virtualenv is not installed:

$ sudo pip install virtualenv

Create a new Python environment:

$ mkdir <project>
$ cd <project>
$ virtualenv env
$ . env/bin/activate

Install Flask:

<from activated env>
$ pip install -r doc/requirements.txt


Install the image server
------------------------

Check out the Image Server source code into the environment so that you have 
this structure:

env/src/         <from svn>
env/src-c/       <from svn>
env/bin/         <virtualenv created>
env/doc/         <from svn>
env/images/      <from svn>
env/include/     <virtualenv created>
env/lib/         <virtualenv created>

Compile and install the python-ImageMagick C library (note that this requires
the MagickWand-config command to be available):

$ cd src-c
$ make
$ make install

Review and adjust the server configuration as required:

$ cat src/imageserver/conf/base_settings.py
$ mkdir conf
$ vi conf/local_settings.py
  ... Add your own setting overrides ...

The value for SECRET_KEY should always be set to something new and non-guessable.

If the image server is to be run using mod_wsgi, the cache database pool size
should be set to the same value as the number of threads per process.

Test the app by running:

<from activated env>
$ cd src
$ memcached &
$ python runserver.py

Then try the following URL (which should serve the requested image, 200px wide):

http://localhost:5000/image?src=test_images/cathedral.jpg&width=200

If Apache/mod_wsgi deployment is required, delete the image server log file after
testing (or run python as the mod_wsgi user to avoid permissions errors when 
the server is started under mod_wsgi).



Apache deployment with mod_wsgi
-------------------------------

Install Apache (this is an exercise left to the reader). Apache should be set
to start after the memcached service, because memcached is required by the
image server on startup.

On a multi-processor server you should use the "worker" MPM (and not "prefork").
To determine which MPM is currently in use, run the command:

$ httpd2 -V

Check Apache's mime.types file for the erroneous entry "text/x-js js" and
remove it if it is present. The correct entry is "application/javascript js"
which should aready be present elsewhere in the file.

Edit Apache's server-tuning.conf or httpd.conf file and reduce or turn off
KeepAlive. By default Apache keeps connections open for 15 seconds after a 
request is made (blocking other requests), which seriously reduces the number
of clients that can be serviced simultaneously.

Edit Apache's sysconfig file (e.g. /etc/sysconfig/httpd) to set the default
character encoding. Add these lines:

# These lines are required to avoid "ascii codec can't decode byte" errors
# when dealing with files and directories that contain non-ascii characters
LANG=en_GB.UTF-8
LC_ALL=en_GB.UTF-8

To install mod_wsgi, download from:
http://www.modwsgi.org/
Then configure, make, make install.

Edit Apache's httpd.conf and add the line:
LoadModule wsgi_module libexec/apache2/mod_wsgi.so

Where "libexec/apache2" is the location of your Apache dynamic modules.
To find where your Apache dynamic modules are and check that mod_wsgi installed
to the correct location, you can run:

$ apxs -q LIBEXECDIR

Then in httpd.conf, find the setting for "ServerRoot" and omit this value from
the front of the path given in the LoadModule directive for mod_wsgi.so

Restart Apache. You can check that mod_wsgi has loaded by checking Apache's log:

$ tail /var/log/apache2/error_log
[Tue Apr 12 10:30:48 2011] [notice] Apache/2.2.15 (Unix) mod_ssl/2.2.15 OpenSSL/0.9.8l 
                                    mod_wsgi/3.3 Python/2.6.5 configured

Edit httpd.conf (or create a new conf file in the vhosts directory) to add a
virtual host for the image server. Note that the featured workaround for Apache
issue CVE-2011-3192 requires mod_headers to be enabled.

WSGIRestrictEmbedded On
WSGIRestrictSignal Off
<VirtualHost *:80>
    ServerName images.example.com
    ServerAlias images
    CustomLog /var/log/apache2/img_access_log common env=NON_EXISTENT
    HostnameLookups Off
    
    # Apache vulnerability CVE-2011-3192
    SetEnvIf Range (,.*?){5,} bad-range=1
    RequestHeader unset Range env=bad-range
    CustomLog /var/log/apache2/CVE-2011-3192.log common env=bad-range

    DocumentRoot <project>/env/src/imageserver/static

    Alias /robots.txt <project>/env/src/imageserver/static/robots.txt
    Alias /favicon.ico <project>/env/src/imageserver/static/favicon.ico
    Alias /static/ <project>/env/src/imageserver/static/
    Alias /admin/static/ <project>/env/src/imageserver/admin/static/
    Alias /reports/static/ <project>/env/src/imageserver/reports/static/
    
    <Directory <project>/env/src/imageserver/static>
        Order deny,allow
        Allow from all
    </Directory>
    <Directory <project>/env/src/imageserver/admin/static>
        Order deny,allow
        Allow from all
    </Directory>
    <Directory <project>/env/src/imageserver/reports/static>
        Order deny,allow
        Allow from all
    </Directory>
    
    WSGIScriptReloading Off
    WSGIApplicationGroup imaging
    WSGIDaemonProcess imaging user=user1 group=group1 processes=2 threads=15 display-name=%{GROUP}
    WSGIProcessGroup imaging

    WSGIImportScript <project>/env/src/wsgi/runserver.wsgi process-group=imaging application-group=imaging
    WSGIScriptAlias / <project>/env/src/wsgi/runserver.wsgi

    <Directory <project>/env/src/wsgi>
        Order deny,allow
        Allow from all
    </Directory>
</VirtualHost>

Where:
- images.example.com is your external public image server name
- the server alias 'images' asks Apache to also serve on the local network as 
  images (requires the DNS for the name 'images' to be configured)
- <project> is the image server project location
- user1 is the user to run the process as
- group1 is the group to run the process as
- the number of spawned processes and threads can be adjusted as required
- WSGIScriptAlias / specifies the application mount point
  / (as in this example) mounts at http://images.example.com/
  /imageserver/ mounts at http://images.example.com/imageserver/ and would require
                the Alias directives to be similarly prefixed.

Notes:
- The top half of the virtual host directive instructs Apache to serve the 
  application's static files, and mounts the static directory as being publicly
  accessible.
- The lower half instructs all other requests to be handled by the mod_wsgi 
  daemon process(es).
- Having at least 2 processes is useful so that if one crashes, the other can
  still service requests while the crashed process is being re-started by
  mod_wsgi. The same argument applies if the WSGIDaemonProcess parameter 
  maximum-requests is added to the above.
- When using multiple threads, configure the image server database pool settings
  to ensure the pool is large enough to serve the number of threads.

Restart Apache again and check for any errors in Apache's error_log.

Then try the following URLs (which should serve the requested image, 200px wide):

http://images/image?src=test_images/cathedral.jpg&width=200
http://images.example.com/image?src=test_images/cathedral.jpg&width=200



Protecting the internal web pages
---------------------------------

The image server's login page, and the content behind it, are pages you may want
to prevent public users from accessing. When using Apache, this can be achieved
by using an .htaccess file, or using e.g. mod_ldap to secure the URLs with a 
username and password.

Alternatively the image server supports the restriction of these "internal" web
pages to a configurable HTTP port number, so that while the public can access
images on port 80, file uploads and folder browsing etc on port 80 can be 
blocked. You can then use a firewalled port number to only allow access to these
web pages from your intranet.

To achieve this on example port 8000:

Edit Apache's listen.conf or httpd.conf file, and add a line to define a new 
listening port: Listen 8000

Edit httpd.conf (or create a new conf file in the vhosts directory) to add a
second virtual host for the image server on the new port number:

<VirtualHost *:8000>
    ServerName images
    
    # Apache vulnerability CVE-2011-3192
    SetEnvIf Range (,.*?){5,} bad-range=1
    RequestHeader unset Range env=bad-range

    DocumentRoot <project>/env/src/imageserver/static

    Alias /robots.txt <project>/env/src/imageserver/static/robots.txt
    Alias /favicon.ico <project>/env/src/imageserver/static/favicon.ico
    Alias /static/ <project>/env/src/imageserver/static/
    
    <Directory <project>/env/src/imageserver/static>
        Order deny,allow
        Allow from all
    </Directory>
    
    WSGIScriptReloading Off
    WSGIDaemonProcess imaging8000 user=user1 group=group1 processes=1 threads=5 display-name=%{GROUP}
    WSGIProcessGroup imaging8000
    WSGIScriptAlias / <project>/env/src/wsgi/runserver.wsgi

    <Directory <project>/env/src/wsgi>
        Order deny,allow
        Allow from all
    </Directory>
</VirtualHost>

This is similar to the "main" virtual host, but specifies port 8000, serves only
on the local server name, sets a different WSGIProcessGroup name, and a reduced 
number of processes and threads for the service.

Re-start Apache and you should now be able to access the image server locally 
on port 8000:
 
http://images:8000/

Lastly, create if necessary and edit the image server's local_settings.py file
to allow internal web pages only on port 8000, and to set the image server's
public host name:

INTERNAL_BROWSING_PORT = 8000
PUBLIC_HOST_NAME = "images.example.com"

The public URL is now required so that when uploading, the server knows that
the final location for an image should be:

  http://images.example.com/image?src=myimage

and *not*:

  http://images:8000/image?src=myimage



Using an LDAP directory to provide user accounts
------------------------------------------------

If you have an existing LDAP or Active Directory server, you can use this
to provide user authentication (logins) instead of authenticating against the
user accounts in the image server.

Install the OpenLDAP Client and development package, if it is not already
present. Version 2.4.11 or later of the OpenLDAP Client is required.

You may also require the openssl-devel package.

Then install python-ldap:

<from activated env>
$ pip install python-ldap

Configure the LDAP settings in local_settings.py
