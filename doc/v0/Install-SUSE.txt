Installation on SUSE Linux Enterprise Server 11 SP1
---------------------------------------------------

Install gcc, gcc-c++ and supporting docs and locale packages with yast2.
Install Python 2.6 with yast2. NOTE! Python versions below 2.6.5 have a bug
that causes a deadlock in the statistics collector when run under mod_wsgi.

Download the iso images for the SUSE LES 11 SP1 SDK.
Add the 2 SDK iso images in yast2 - Software - Software Repositories. 

Install zlib-devel with yast2.
Install libjpeg-devel with yast2.
Install libtiff-devel with yast2.
Install libpng-devel with yast2.
Install librsvg-devel with yast2.
Install libxml2-devel with yast2.
Install ghostscript-devel with yast2.
Install liblcms-devel with yast2.
Install python-devel with yast2.

Install apache2 with yast2.
Install the apache2 worker MPM (not prefork).
Install apache2-devel with yast2 (requires SLES SDK as above).
Edit the file /etc/apache2/mime.types and remove the entry for "text/x-js".
Start Apache2:
$ sudo /etc/init.d/apache2 start

Install postgresql-server with yast2.
Install postgresql-devel with yast2 (requires SLES SDK as above).
Check that the postgres service starts before the apache2 service.
Edit Postgres configuration to allow local database logins:
$ sudo vi /var/lib/pgsql/data/pg_hba.conf
  local    all    all                     trust
  host     all    all     127.0.0.1/32    password
  host     all    all     ::1/128         password
Start Postgres:
$ sudo /etc/init.d/postgresql start

Create a new Postgres database:
$ sudo -u postgres createuser --no-superuser --no-createdb --no-createrole qis
$ sudo -u postgres createdb --owner qis qis-cache
$ sudo -u postgres createdb --owner qis qis-mgmt

Create qis process user:
$ sudo useradd --comment "Quru Image Server" -d /opt/qis --system --shell /sbin/nologin qis

Install libevent from source:
$ ./configure
$ make
$ sudo make install

Install memcached from source:
$ ./configure
$ make
$ sudo make install

After install, create a symlink so that memcached is on the PATH:
$ sudo ln -s /usr/local/bin/memcached /usr/sbin/memcached

Create memcached configuration file /etc/sysconfig/memcached - see below for content.
Edit the configuration to set the cache size (-m option).
Create memcached init script /etc/init.d/memcached - see below for content - and
set it to be executable:
$ sudo chmod a+x /etc/init.d/memcached 
Start memcached:
$ sudo /etc/init.d/memcached start

Set memcached to start before the Apache service.
Edit the file /etc/init.d/apache2
Add memcached to the line beginning: # Required-Start

Install ImageMagick from source (v6.8.2-4 or above). Check the output from configure
that lcms is in LIBS and the required file formats are enabled.
$ ./configure --with-quantum-depth=8
$ make
$ sudo make install

After install, update the shared library bindings:
$ sudo ldconfig /usr/local/lib

Install setuptools and pip for Python 2.6.

Create application directories for the image server.
$ sudo su qis
$ cd /opt/qis/
$ mkdir icc
$ mkdir logs
$ mkdir templates
$ mkdir src-c
$ mkdir src
$ mkdir -p lib/python2.6/site-packages

Install Flask, python-memcached, SQLAlchemy, psycopg2, etc
(use the latest recommended versions):
$ sudo su qis
$ export PYTHONPATH=/opt/qis/lib/python2.6/site-packages
$ pip install --install-option="--prefix=/opt/qis/" -r doc/requirements.txt

Install the image server code in the image server direcrtory:
<copy ICC files into /opt/qis/icc/>
<copy default templates into /opt/qis/templates/>
<copy C source files into /opt/qis/src-c/>
<copy Python source files into /opt/qis/src/>

Install the image server's ImageMagick-Python library:
$ sudo su qis
$ cd /opt/qis/src-c/
$ make
$ make install

Create a symlink to the images:
$ cd /opt/qis/
$ sudo -u qis ln -s /Images/Originals_2006/ images

Review the default image server settings and paths in:
  /opt/qis/src/imageserver/conf/base_settings.py
Override these with your own settings by creating:
  /opt/qis/conf/local_settings.py
Or set the QIS_SETTINGS environment variable to be the path of a
different custom settings file.

Test the image server running with the built-in Python web server on port 5000.
This should now work. After testing, delete /opt/qis/logs/qis.log.
$ cd /opt/qis/src/
$ export PYTHONPATH=$PYTHONPATH:/opt/qis/lib/python2.6/site-packages/
$ python runserver.py

Install mod_wsgi from source. On SUSE there is an issue with the Apache headers 
that requires an extra option to be provided to the configure script:
$ ./configure --with-apxs=/usr/sbin/apxs2-worker
$ make
$ sudo make install
Note that 'httpd2 -V' displays whether Apache is in worker (or prefork) mode.

Check that mod_wsgi.so has installed in /usr/lib64/apache2-worker/

Configure mod_wsgi for Apache. SUSE uses its own Apache files in special locations, 
therefore the following replaces the normal instructions for configuring httpd.conf.

Edit /etc/sysconfig/apache2, find the line defining APACHE_MODULES, and add mod_wsgi:

APACHE_MODULES="[...existing modules...] wsgi"

Re-start Apache and check that mod_wsgi has loaded (it should be listed in the 
server startup log entry):
$ tail /var/log/apache2/error_log

Create a new file /etc/apache2/vhosts.d/qis.conf - see below for an 
example - and configure an Apache virtual host here instead of directly in 
httpd.conf. Note that the featured workaround for Apache issue CVE-2011-3192 
requires mod_headers to be enabled.

Re-start Apache again and test whether the image server is working. If not, 
look again in Apache's error_log for mod_wsgi and Python errors.

Reduce or turn off KeepAlive in /etc/apache2/server-tuning.conf

Edit the worker settings in /etc/apache2/server-tuning.conf so that the values for
ThreadLimit and ThreadsPerChild are the same and match the number of threads per
process defined in qis.conf. Set the value of MaxClients to 
(ThreadsPerChild * 16), where 16 is the default value for ServerLimit.

If required, set up an additional Apache port number and virtual server and 
restrict access to the internal web pages as described in Install.txt.

When complete, instruct the image server's services to run on boot:
$ cd /etc/init.d/
$ sudo /sbin/insserv postgresql
$ sudo /sbin/insserv memcached
$ sudo /sbin/insserv apache2

Re-boot the server and check that image server is available without intervention.

End.



sample qis.conf
---------------

<VirtualHost *:80>
    ServerName images.example.com

    WSGIScriptAlias / /opt/qis/src/wsgi/runserver.wsgi

    # python-path mentioned to subvert virtualenv
    # set the number of processes equal to the cpu cores
    # threads as per the scalability required
    WSGIApplicationGroup qis
    WSGIDaemonProcess qis user=qis group=www processes=4 threads=25 python-path=/opt/qis/src:/opt/qis/lib/python2.6/site-packages
    WSGIProcessGroup qis

    WSGIImportScript /opt/qis/src/wsgi/runserver.wsgi process-group=qis application-group=qis

    <Directory /opt/qis/src/wsgi>
        Order deny,allow
        Allow from all
    </Directory>

    <Directory /opt/qis/src/imageserver/static>
        Order deny,allow
        Allow from all
    </Directory>
    <Directory /opt/qis/src/imageserver/admin/static>
        Order deny,allow
        Allow from all
    </Directory>
    <Directory /opt/qis/src/imageserver/reports/static>
        Order deny,allow
        Allow from all
    </Directory>

    Alias /robots.txt      /opt/qis/src/imageserver/static/robots.txt
    Alias /favicon.ico     /opt/qis/src/imageserver/static/favicon.ico
    Alias /static/         /opt/qis/src/imageserver/static/
    Alias /admin/static/   /opt/qis/src/imageserver/admin/static/
    Alias /reports/static/ /opt/qis/src/imageserver/reports/static/

</VirtualHost>



memcached sysconfig script (1GB cache size)
--------------------------

## Path:        Network/WWW/Memcached
## Description: start parameters for memcached.
## Type:        string
## Default:     "-d -l 127.0.0.1"
## Config:      memcached
#
# start parameters for memcached.
#
# see man 1 memcached for more
#
MEMCACHED_PARAMS="-d -l 127.0.0.1 -m 1024"

## Path:        Network/WWW/Memcached
## Description: username memcached should run as
## Type:        string
## Default:     "memcached"
## Config:      memcached
#
# username memcached should run as
#
MEMCACHED_USER="memcached"

## Path:        Network/WWW/Memcached
## Description: group memcached should be run as
## Type:        string
## Default:     "memcached"
## Config:      memcached
#
# group memcached should be run as
#
MEMCACHED_GROUP="memcached"



memcached init script
---------------------

#! /bin/sh
# Copyright (c) 1995-2004 SUSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Author: Kurt Garloff
# Please send feedback to http://www.suse.de/feedback/
#
# /etc/init.d/memcached
#   and its symbolic link
# /(usr/)sbin/rcmemcached
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# Template system startup script for some example service/daemon memcached
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
#
# Note: This template uses functions rc_XXX defined in /etc/rc.status on
# UnitedLinux (UL) based Linux distributions. If you want to base your
# script on this template and ensure that it works on non UL based LSB
# compliant Linux distributions, you either have to provide the rc.status
# functions from UL or change the script to work without them.
#
### BEGIN INIT INFO
# Provides:          memcached
# Required-Start:    $remote_fs
# Should-Start: $time ypbind sendmail
# Required-Stop:     $remote_fs
# Should-Stop: $time ypbind sendmail
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: memcached XYZ daemon providing ZYX
# Description:       Start memcached to allow XY and provide YZ
#   continued on second line by '#<TAB>'
#   should contain enough info for the runlevel editor
#   to give admin some idea what this service does and
#   what it's needed for ...
#   (The Short-Description should already be a good hint.)
### END INIT INFO
#
# Any extensions to the keywords given above should be preceeded by
# X-VendorTag- (X-UnitedLinux- X-SuSE- for us) according to LSB.
#
# Notes on Required-Start/Should-Start:
# * There are two different issues that are solved by Required-Start
#    and Should-Start
# (a) Hard dependencies: This is used by the runlevel editor to determine
#     which services absolutely need to be started to make the start of
#     this service make sense. Example: nfsserver should have
#     Required-Start: $portmap
#     Also, required services are started before the dependent ones.
#     The runlevel editor will warn about such missing hard dependencies
#     and suggest enabling. During system startup, you may expect an error,
#     if the dependency is not fulfilled.
# (b) Specifying the init script ordering, not real (hard) dependencies.
#     This is needed by insserv to determine which service should be
#     started first (and at a later stage what services can be started
#     in parallel). The tag Should-Start: is used for this.
#     It tells, that if a service is available, it should be started
#     before. If not, never mind.
# * When specifying hard dependencies or ordering requirements, you can
#   use names of services (contents of their Provides: section)
#   or pseudo names starting with a $. The following ones are available
#   according to LSB (1.1):
#   $local_fs       all local file systems are mounted
#               (most services should need this!)
#   $remote_fs      all remote file systems are mounted
#               (note that /usr may be remote, so
#                many services should Require this!)
#   $syslog         system logging facility up
#   $network        low level networking (eth card, ...)
#   $named          hostname resolution available
#   $netdaemons     all network daemons are running
#   The $netdaemons pseudo service has been removed in LSB 1.2.
#   For now, we still offer it for backward compatibility.
#   These are new (LSB 1.2):
#   $time           the system time has been set correctly 
#   $portmap        SunRPC portmapping service available
#   UnitedLinux extensions:
#   $ALL            indicates that a script should be inserted
#               at the end
# * The services specified in the stop tags
#   (Required-Stop/Should-Stop)
#   specify which services need to be still running when this service
#   is shut down. Often the entries there are just copies or a subset
#   from the respective start tag.
# * Should-Start/Stop are now part of LSB as of 2.0,
#   formerly SUSE/Unitedlinux used X-UnitedLinux-Should-Start/-Stop.
#   insserv does support both variants.
# * X-UnitedLinux-Default-Enabled: yes/no is used at installation time
#   (%fillup_and_insserv macro in %post of many RPMs) to specify whether
#   a startup script should default to be enabled after installation.
#   It's not used by insserv.
#
# Note on runlevels:
# 0 - halt/poweroff             6 - reboot
# 1 - single user           2 - multiuser without network exported
# 3 - multiuser w/ network (text mode)  5 - multiuser w/ network and X11 (xdm)
#
# Note on script names:
# http://www.linuxbase.org/spec/refspecs/LSB_1.3.0/gLSB/gLSB/scrptnames.html
# A registry has been set up to manage the init script namespace.
# http://www.lanana.org/
# Please use the names already registered or register one or use a
# vendor prefix.
 
 
# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
MEMCACHED_BIN=/usr/sbin/memcached
test -x $MEMCACHED_BIN || { echo "$MEMCACHED_BIN not installed";
    if [ "$1" = "stop" ]; then exit 0;
    else exit 5; fi; }
 
# Check for existence of needed config file and read it
MEMCACHED_CONFIG=/etc/sysconfig/memcached
test -r $MEMCACHED_CONFIG || { echo "$MEMCACHED_CONFIG not existing";
    if [ "$1" = "stop" ]; then exit 0;
    else exit 6; fi; }
 
# Read config  
. $MEMCACHED_CONFIG
 
# Source LSB init functions
# providing start_daemon, killproc, pidofproc,
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions
 
# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status
 
# Reset status of this service
rc_reset
 
# Return values acc. to LSB for all commands but status:
# 0   - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.
 
case "$1" in
    start)
    echo -n "Starting memcached "
    ## Start daemon with startproc(8). If this fails
    ## the return value is set appropriately by startproc.
    startproc -u $MEMCACHED_USER -g $MEMCACHED_GROUP $MEMCACHED_BIN $MEMCACHED_PARAMS
 
    # Remember status and be verbose
    rc_status -v
    ;;
    stop)
    echo -n "Shutting down memcached "
    ## Stop daemon with killproc(8) and if this fails
    ## killproc sets the return value according to LSB.
 
    killproc -TERM $MEMCACHED_BIN
 
    # Remember status and be verbose
    rc_status -v
    ;;
    try-restart|condrestart)
    ## Do a restart only if the service was active before.
    ## Note: try-restart is now part of LSB (as of 1.9).
    ## RH has a similar command named condrestart.
    if test "$1" = "condrestart"; then
        echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
    fi
    $0 status
    if test $? = 0; then
        $0 restart
    else
        rc_reset    # Not running is not a failure.
    fi
    # Remember status and be quiet
    rc_status
    ;;
    restart)
    ## Stop the service and regardless of whether it was
    ## running or not, start it again.
    $0 stop
    $0 start
 
    # Remember status and be quiet
    rc_status
    ;;
    force-reload)
    ## Signal the daemon to reload its config. Most daemons
    ## do this on signal 1 (SIGHUP).
    ## If it does not support it, restart.
 
    echo -n "Reload service memcached "
    ## if it supports it:
    killproc -HUP $MEMCACHED_BIN
    #touch /var/run/memcached.pid
    rc_status -v
 
    ## Otherwise:
    #$0 try-restart
    #rc_status
    ;;
    reload)
    ## Like force-reload, but if daemon does not support
    ## signaling, do nothing (!)
 
    # If it supports signaling:
    echo -n "Reload service memcached "
    killproc -HUP $MEMCACHED_BIN
    #touch /var/run/memcached.pid
    rc_status -v
     
    ## Otherwise if it does not support reload:
    #rc_failed 3
    #rc_status -v
    ;;
    status)
    echo -n "Checking for service memcached "
    ## Check status with checkproc(8), if process is running
    ## checkproc will return with exit status 0.
 
    # Return value is slightly different for the status command:
    # 0 - service up and running
    # 1 - service dead, but /var/run/  pid  file exists
    # 2 - service dead, but /var/lock/ lock file exists
    # 3 - service not running (unused)
    # 4 - service status unknown :-(
    # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
     
    # NOTE: checkproc returns LSB compliant status values.
    checkproc $MEMCACHED_BIN
    # NOTE: rc_status knows that we called this init script with
    # "status" option and adapts its messages accordingly.
    rc_status -v
    ;;
    probe)
    ## Optional: Probe for the necessity of a reload, print out the
    ## argument to this init script which is required for a reload.
    ## Note: probe is not (yet) part of LSB (as of 1.9)
 
    test /etc/sysconfig/memcached -nt /var/run/memcached.pid && echo reload
    ;;
    *)
    echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
    exit 1
    ;;
esac
rc_exit
