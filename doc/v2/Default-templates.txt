QIS v2.0 Replace default image settings with default templates, add image security
==================================================================================

This change follows the move of image templates from being flat text files to
being entities in the database. It starts with a simple observation:

* We should replace the system settings: `IMAGE_FORMAT_DEFAULT, IMAGE_QUALITY_DEFAULT,
  IMAGE_COLORSPACE_DEFAULT, IMAGE_DPI_DEFAULT, IMAGE_STRIP_DEFAULT, IMAGE_EXPIRY_TIME_DEFAULT`
  ... with a single "system default" image template instead.
* This simplifies the system settings, allows any of the image parameters to have a
  default value (instead of a select few), and allows the defaults to be changed within
  the admin interface without requiring a system re-start.

This is a neat improvement to the system architecture, but delivers little new functionality.
Enter perhaps the biggest problem remaining from QIS v1, that any user can change
an image URL to serve the image at any size, change or remove an overlay, etc. With the
default template change described above, we can introduce image security by adding new
flags to the template that specify whether each parameter can be overridden.

So change the template JSON from:

	{
	  "width": 500,
	  "overlay": "/path/to/logo.jpg"
	}

to:

	{
	  "width": {
		"value": 500,
		"override": "lte",
		"override_limit": 1000
	  },
	  "overlay": {
	    "value": "/path/to/logo.jpg",
	    "override": "no"
	  }
	}

And in the future we will be able to add further enhancements such as:

	{
	  "width": {
		"value": 500,
		"override": "lte",
		"override_limit": 1000,
		"user_notes": "All thumbnails are < 1000, don't serve anything larger"
	  },
	  "overlay": {
	    "value": "/path/to/logo.jpg",
	    "override": "no",
		"user_notes": "Force the logo as a watermark"
	  }
	}

The `override` flag can have values: `yes | no | lte | gte`. The latter values
mean "less than or equal" and "greater than or equal", to be used for numerical
fields alongside an override limit.

Image security is not required on all fields, but is relevant to these:

* `width` and `height` - to prevent the serving of full size images
* `page` - for e.g. PDF or multi-page TIFF files, allow access only to the cover page
* `overlay` (all) - to prevent tampering when the overlay is used as a watermark
* `strip` - to prevent the removal of EXIF data (which might contain a copyright notice, etc)

The cropping fields have been also considered but excluded from this change because:

* Cropping is usually applied per-image rather than in bulk with a template
* Cropping occurs after `flip` and `rotate`, meaning these parameters would also
  have to be secured for a locked-down cropping area to make any sense
* Cropping is intended to be used for art direction, not redaction
* Different sizes of the same image often have different cropping requirements

However being able to restrict the width and height of an image using the default
template means we can delete 2 further system settings:

* `PUBLIC_MAX_IMAGE_WIDTH, PUBLIC_MAX_IMAGE_HEIGHT`
* These had a very narrow use-case, and the functionality is duplicated and
  better replaced by the more generic mechanism being described here

Phase 1
=======
Implement the above, with 2 global default templates:

* Public default template
* Logged-in default template

to replace the old `IMAGE_foo_DEFAULT` and `PUBLIC_MAX_foo` settings.
These should be applied in the same way as before, unless an override flag is
`no`, `lte` or `gte`. TODO for an image with "tmp=foo" in the URL how do we
treat the override flags from foo vs the flags from the default template?

This fulfils the basic original brief discussed at the top of this document.
It also allows public images to be "locked down" while registered users can
(if the logged-in default template allows) have more freedom of access.

Code changes - Phase 1

* v1 to v2 template import routine - change to new JSON format
* Initial template data - change to new JSON format
* Add initial data for the 2 new system default templates
* TemplateAttrs - add a piggy-back dict to hold per-field extras
  (just the override rules for now)
  * TODO consider other options, this doesn't feel very neat
* ImageAttrs / TemplateAttrs - apply default settings based on new override flags
  * TODO should a denied override be silently ignored or throw an error?
* Admin page to set the default templates
* Do not allow deletion of templates that are in use as a default template
* Template API - get and set the override definitions
* Template admin page - add the override definitions to the fields that offer security
* Template manager - new method to return the appropriate default template
* Image publisher - display the system default template if no specific template
  is selected, indicate which fields cannot be overridden
* Image API help page - list the defaults from the default templates instead of the
  old system settings, remove the section about public limits, document the
  new field override limits
* Upgrade affected unit tests
* Add new tests to validate the override behaviour


Phase 2
=======
So far so good then. But phase 1 does not deliver a great deal of flexibility;
you probably want to protect some images differently from others. Even for the
same image it is reasonable to want the ability to serve a plain small thumbnail
while enforcing a watermark on large versions of it.

TODO all the rest is still open for discussion / subject to change

TODO decide whether "tmp=foo" in the URL should override (again) the default
template or replace it entirely. The latter seems easier to understand.

QIS already has a mechanism for defining access rules by user group and
folder - the folder permissions. Since this is where we define whether a user
(in reality a group) can view an image, it seems reasonable to define the image
field security in the same place. Then when the folder permissions say that `view`
access to an image is permitted, the new field security can extend that to say how
it can be viewed. Yes you can view the image but only a small version, or yes
you can view the image in its entirety, for example. To achieve this we need only
add one new field to the `FolderPermissions` table, so that it becomes:

* `id`
* `folder_id` - Mandatory link to folder
* `group_id` - Mandatory link to group
* `access` - Mandatory access level
* New field `default_template_id` - Optional link to default image template

This provides the ability to assign a default image template to a group and
folder combination. The new field will be optional, and blank by default.

QIS will ship with a default template for the `public` group and `root` folder,
to act as the global "system default" template. Installations that do not require
fine-grained view control will not need to define anything new beyond the standard
folder permissions.


More thoughts

[14/10/2015 10:16:56] Matt Fozard: Our proposal from yesterday really screws up the image publisher.  The person logged in might not be allowed to set some of the image parameters.  Then if they can, the published image might look totally different to the public and/or different groups.  You need the preview image to be a "view as [select group]" function.
[14/10/2015 10:19:58] Matt Fozard: Perhaps it comes down to having a "Publish for [select group || public]" bit at the top.
That would establish the correct default template.
[14/10/2015 10:20:29] Matt Fozard: Then the publisher just allows access to everything, and if the template doesn't allow override then it just has no effect.
[14/10/2015 10:22:16] Roland Whitehead: OK, I like the "publish for" menu on the top of the publish screen. It should default to "Public"
[14/10/2015 10:23:17] Roland Whitehead: But chosing the group should then add in a line : "This group's access to this image is limited by template <templatename>" with a link to that template (assuming that they can actually edit the templates...)
[14/10/2015 10:28:01] Matt Fozard: That would be OK. At the moment anyone with an admin function can view the templates, but only super user can edit them.
[14/10/2015 10:34:49] Matt Fozard: Next question. If you have "download original" permission to an image, do you think we should ignore the override flags on the default template? There doesn't seem much point restricting access to things when you can get the full image anyway.
[14/10/2015 10:35:52] Matt Fozard: This would also solve the problem of permissions in the publisher.  You need download permission to use the publisher.  If you had it, you would then be able to preview the effect of all the parameters without you yourself being blocked.
[14/10/2015 10:36:49] Roland Whitehead: If you have download permission then the /original or /details commands ignore any templates... However, /image should still stick to the template rules...
[14/10/2015 10:37:13] Roland Whitehead: Sounds sensible that you need the download permission to use the publisher.
[14/10/2015 10:37:42] Roland Whitehead: If you have upload permission, do you also automatically have the download permission? Could we have a situation where someone can upload an image but not download it?
[14/10/2015 10:39:21] Matt Fozard: Currently, upload permission includes download permission. So if you can upload you would always be able to download.
[14/10/2015 10:41:59] Roland Whitehead: So yes, the publish option should only be available for people with download...


Terminology

To avoid ambiguity and confusion, the system requires the use of some standard
terminology to describe these new concepts. Proposed are:

* TODO
* Default template?  Image field security?  


Code changes - Phase 2

* TODO Move default template getter from template manager into permissions manager?
  This would (possibly) make sense if it is also based on folder + group
* TODO permissions manager - alter the default template function to take
  into account folder and group
  * TODO This isn't nice for users with multiple groups
    * Roland suggested ranking the groups and taking just the highest ranking group
      for the current folder (or nearest parent with a default folder defined)
    * Group ranking would need a new db field and admin UI
    * Should group ranking then be used for folder permissions?
      Currently we use the most permissive of all the groups.
      This would be a breaking change.
    * --> Not keen on group ranking

Documentation

* Write a new guide to setting up the permissions
  * Scenario - all images public by default, require login to download or more
  * Scenario - all images private by default, selective view, selective downloads
  * Scenario - watermark all the images in a folder
  * Scenario - watermark images > 1000px, max size < 2000px
